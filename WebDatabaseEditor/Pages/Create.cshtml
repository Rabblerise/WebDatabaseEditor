@page "/Create"
@model WebDatabaseEditor.Pages.CreateModel
@{
    ViewData["Title"] = "Create page";
}

<div class="container mt-4">
    <form method="post">
        <div class="row mb-2">
            <div class="col-md-4">
                <label for="TableName">Имя таблицы:</label>
                <input type="text" id="TableName" class="form-control" asp-for="TableName" required/>
            </div>
            <div class="col-md-2">
                <button type="button" onclick="addRow()" class="btn btn-primary">Добавить строку</button>
            </div>
            <div class="col-md-2">
                <button type="button" onclick="addColumn()" class="btn btn-primary">Добавить столбец</button>
            </div>

            <div class="col-md-2">
                <button type="button" onclick="deleteRow()" class="btn btn-danger">Удалить строку</button>
            </div>
            <div class="col-md-2">
                <button type="button" onclick="deleteColumn()" class="btn btn-danger">Удалить столбец</button>
            </div>

            <div class="row">
                <div class="col-md-6">
            <label for="SelectedRole">Права доступа:</label>
            <select id="SelectedRole" class="form-control" asp-for="SelectedRole" asp-items="Model.Roles">
                <option value="">Выберите роль</option>
            </select>
        </div>
                <div class="col-md-6">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-primary" onclick="exportToExcel()">Экспорт в Excel</button>
                    </div>
                    <div class="col-md-3">
                        <input type="file" id="importFile" class="btn btn-secondary" accept=".xlsx" onchange="importFromExcel(this)" />
                    </div>
                </div>
            </div>
        </div>

        <table id="editableTable" class="table table-bordered">
            <thead>
                <tr>
                    <!-- Заголовки столбцов таблицы, если необходимо -->
                    <td>ID</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td contenteditable="true">Новая ячейка</td>
                    <!-- ... другие ячейки по умолчанию ... -->
                </tr>
            </tbody>
        </table>

        <div class="row mt-2">
            <div class="col-md-12">
                <button type="submit" class="btn btn-success">Создать таблицу</button>
            </div>
        </div>
    </form>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script>
        var rowIndexs = 0;
        function addRow() {
            var table = document.getElementById("editableTable").getElementsByTagName('tbody')[0];

            var newRow = table.insertRow(table.rows.length);
            if (rowIndexs === 0) {
                newRow.className = "Header";
            }
            rowIndexs++;

            for (var i = 0; i < table.rows[0].cells.length; i++) {
                var cell = newRow.insertCell(i);
                var input = document.createElement('input')
                input.type = "text";

                if (cell.parentElement.className == table.rows[0].className) {
                    input.name = 'CellValues_' + 1;
                    input.style = "border: none; width: 100%; height: 100%; font-weight: bold;";

                    input.addEventListener("input", function (event) {
                        var value = event.target.value.trim();
                        if (headerValues.has(value) || !/^[a-zA-Z]/.test(value)) {
                            event.target.setCustomValidity("Значение должно быть уникальным и начинаться с буквы.");
                        } else {
                            event.target.setCustomValidity("");
                            headerValues.add(value);
                        }
                    });
                }
                else {
                    input.name = 'CellValues_' + 2;
                    input.style = "border: none; width: 100%; height: 100%;";
        }

                input.placeholder = "Новая ячейка";
                cell.style = "padding: 0";
                input.required = true;
                cell.appendChild(input);
            }
        }

        function addColumn() {
            var table = document.getElementById("editableTable");

            for (var i = 0; i < table.rows.length; i++) {
                var newRowCell = table.rows[i].insertCell(table.rows[i].cells.length);
                var input = document.createElement('input')
                input.type = "text";
                if (newRowCell.parentElement.className == table.rows[0].className) {
                    input.name = 'CellValues_' + 1;
                    input.style = "border: none; width: 100%; height: 100%; font-weight: bold;";

                    input.addEventListener("input", function (event) {
                        var value = event.target.value.trim();
                        if (headerValues.has(value) || !/^[a-zA-Z]/.test(value)) {
                            event.target.setCustomValidity("Значение должно быть уникальным и начинаться с буквы.");
                        } else {
                            event.target.setCustomValidity("");
                            headerValues.add(value);
            }
                    });
        }
                else { 
                    input.name = 'CellValues_' + 2;
                    input.style = "border: none; width: 100%; height: 100%; ";
                }
                input.placeholder = "Новая ячейка";

                newRowCell.style = "padding: 0";
                input.required = true;
                newRowCell.appendChild(input);
            }
        }

        function deleteRow() {
            var table = document.getElementById("editableTable").getElementsByTagName('tbody')[0];
            if (table.rows.length > 1) {
                table.deleteRow(table.rows.length - 1);
            } else {
                alert("Невозможно удалить последнюю строку.");
            }
        }

        function deleteColumn() {
            var table = document.getElementById("editableTable");
            if (table.rows[0].cells.length > 1) {
                for (var i = 0; i < table.rows.length; i++) {
                    table.rows[i].deleteCell(table.rows[i].cells.length - 1);
                }
            } else {
                alert("Невозможно удалить последний столбец.");
            }
        }

        function exportToExcel() {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Sheet 1');

            var headerRow = worksheet.addRow([]);

            $('#editableTable tbody tr:first-child td').each(function (index) {
                var input = $(this).find('input');
                if (input.length > 0) {
                    headerRow.getCell(index + 1).value = input.val();
            }
            });
            headerRow.eachCell((cell) => {
                cell.style = { font: { bold: true } };
            });

            $('#editableTable tbody tr:not(:first-child)').each(function () {
                var dataRow = worksheet.addRow([]);
                $(this).find('td').each(function (index) {
                    var input = $(this).find('input');
                    if (input.length > 0) {
                        dataRow.getCell(index + 1).value = input.val();
                    }
                });
            });

            workbook.xlsx.writeBuffer().then((buffer) => {
                var blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                saveAs(blob, 'table_data.xlsx');
            });
                }

        function importFromExcel(input) {
            var file = input.files[0];
            rowIndexs = "";
            if (file) {    
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    var workbook = new ExcelJS.Workbook();

                    workbook.xlsx.load(data).then(workbook => {
                        var worksheet = workbook.getWorksheet('Sheet 1');

                        clearTable();

                        addHeaderRow(worksheet.getRow(1));

                        addDataRows(worksheet);
                    });
            };

                reader.readAsArrayBuffer(file);
            }
        }

        function clearTable() {
            var table = document.getElementById("editableTable");
            var tbody = table.getElementsByTagName('tbody')[0];
            tbody.innerHTML = ''; 
            rowIndex = 0;
        }

        function addHeaderRow(headerRow) {
            try {
                var table = document.getElementById("editableTable");
                var tbody = table.getElementsByTagName('tbody')[0];

                while (tbody.rows.length > 0) {
                    tbody.deleteRow(0);
                }

                var newRow = tbody.insertRow(0);
                newRow.className = "Header";

                headerRow.eachCell((cell, colNumber) => {
                    var newCell = newRow.insertCell(colNumber - 1); 
                    var input = createInput('CellValues_' + 1);
                    input.style.fontWeight = "bold";
                    input.value = cell.text || "";
                    newCell.appendChild(input);
                });
            } catch (error) {
                console.error("Error in addHeaderRow:", error);
            }
        }

        function addDataRows(worksheet) {
            try {
                var table = document.getElementById("editableTable");
                var tbody = table.getElementsByTagName('tbody')[0];

                worksheet.eachRow((row, rowIndex) => {
                    if (rowIndex > 1) {
                        var dataRow = tbody.insertRow(tbody.rows.length);

                        row.eachCell((cell, colNumber) => {
                            var newCell = dataRow.insertCell(colNumber - 1); 
                            var input = createInput('CellValues_' + 2);
                            input.value = cell.text || "";
                            newCell.appendChild(input);
                        });
                    }
            });
            } catch (error) {
                console.error("Error in addDataRows:", error);
            }
        }

        function createInput(name) {
            var input = document.createElement('input');
            input.type = "text";
            input.name = name;
            input.style = "border: none; width: 100%; height: 100%;";
            input.placeholder = "Новая ячейка";
            input.required = true;
            return input;
        }
    </script>
}